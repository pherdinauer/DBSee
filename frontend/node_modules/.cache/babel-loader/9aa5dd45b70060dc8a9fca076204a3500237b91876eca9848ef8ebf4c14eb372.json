{"ast":null,"code":"import axios from 'axios';\nimport toast from 'react-hot-toast';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000/api/v1';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  timeout: 30000,\n  // Increased timeout to 30 seconds\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Token management\nconst getToken = () => {\n  return localStorage.getItem('access_token');\n};\nconst setToken = token => {\n  localStorage.setItem('access_token', token);\n};\nconst removeToken = () => {\n  localStorage.removeItem('access_token');\n};\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  var _config$url;\n  const token = getToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n\n  // Add logging for debugging\n  if ((_config$url = config.url) !== null && _config$url !== void 0 && _config$url.includes('/search/company')) {\n    console.log('Request interceptor - Company search request:', {\n      url: config.url,\n      method: config.method,\n      hasAuth: !!config.headers.Authorization,\n      timeout: config.timeout\n    });\n  }\n  return config;\n}, error => {\n  console.error('Request interceptor error:', error);\n  return Promise.reject(error);\n});\n\n// Response interceptor for error handling\napi.interceptors.response.use(response => {\n  var _response$config$url;\n  // Log successful responses for debugging\n  if ((_response$config$url = response.config.url) !== null && _response$config$url !== void 0 && _response$config$url.includes('/search/')) {\n    console.log('Response interceptor - Successful response:', {\n      status: response.status,\n      url: response.config.url,\n      dataKeys: Object.keys(response.data || {})\n    });\n  }\n  return response;\n}, error => {\n  var _error$response, _error$response2, _error$message, _error$response3, _error$response4, _error$response5;\n  console.error('Axios response interceptor caught error:', error);\n  console.error('Error code:', error.code);\n  console.error('Error message:', error.message);\n  console.error('Response status:', (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n  console.error('Response data:', (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n  if (error.code === 'ECONNABORTED' || (_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('timeout')) {\n    console.error('Request timeout detected');\n    toast.error('Request timeout. The search is taking too long. Please try again.');\n  } else if (((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.status) === 403) {\n    console.error('403 Forbidden - Authentication/Authorization failed');\n    toast.error('Access denied. Please check your permissions or login again.');\n    // Don't redirect on 403, just show error\n  } else if (((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) === 401) {\n    removeToken();\n    toast.error('Session expired. Please login again.');\n    // Redirect to login page\n    window.location.href = '/login';\n  } else if (error.response && error.response.status >= 500) {\n    toast.error('Server error. Please try again later.');\n  } else if ((_error$response5 = error.response) !== null && _error$response5 !== void 0 && _error$response5.data) {\n    const errorData = error.response.data;\n    toast.error(errorData.detail || 'An error occurred');\n  } else if (error.request) {\n    toast.error('Network error. Please check your connection and ensure the backend is running.');\n  } else {\n    toast.error('An unexpected error occurred.');\n  }\n  return Promise.reject(error);\n});\n\n// API functions\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    const token = response.data.access_token;\n    setToken(token);\n    return response.data;\n  },\n  logout: async () => {\n    try {\n      await api.post('/auth/logout');\n    } finally {\n      removeToken();\n    }\n  },\n  getCurrentUser: async () => {\n    const response = await api.get('/auth/me');\n    return response.data;\n  },\n  isAuthenticated: () => {\n    return !!getToken();\n  }\n};\nexport const tablesAPI = {\n  getTables: async () => {\n    const response = await api.get('/tables/');\n    return response.data;\n  },\n  getTableSchema: async tableName => {\n    const response = await api.get(`/tables/${tableName}/schema`);\n    return response.data;\n  },\n  queryTable: async (tableName, filters) => {\n    const response = await api.post(`/tables/${tableName}/query`, filters);\n    return response.data;\n  },\n  getTableData: async (tableName, page = 1, pageSize = 20, search, orderBy, orderDir = 'asc') => {\n    const params = new URLSearchParams({\n      page: page.toString(),\n      page_size: pageSize.toString(),\n      order_dir: orderDir\n    });\n    if (search) params.append('search', search);\n    if (orderBy) params.append('order_by', orderBy);\n    const response = await api.get(`/tables/${tableName}/data?${params}`);\n    return response.data;\n  }\n};\nexport const searchAPI = {\n  searchByCIG: async cig => {\n    const response = await api.get(`/search/cig?cig=${encodeURIComponent(cig)}`);\n    return response.data;\n  },\n  searchByCompany: async companyName => {\n    console.log('Starting company search API call for:', companyName);\n    console.log('Auth token present:', !!getToken());\n    try {\n      const params = new URLSearchParams({\n        company_name: companyName\n      });\n      const url = `/search/company?${params}`;\n      console.log('Making request to:', url);\n      console.log('Full URL:', `${API_BASE_URL}${url}`);\n      const startTime = Date.now();\n      console.log('Request started at:', new Date().toISOString());\n      console.log('About to send request...');\n      const response = await api.get(url, {\n        timeout: 30000 // 30 seconds timeout for company search (matching backend)\n      });\n      console.log('Request sent successfully, awaiting response...');\n      const endTime = Date.now();\n      console.log('Request completed in:', endTime - startTime, 'ms');\n      console.log('Response status:', response.status);\n      console.log('Response data keys:', Object.keys(response.data || {}));\n      return response.data;\n    } catch (error) {\n      var _error$response6, _error$response7, _error$response8;\n      console.error('Company search API error:', error);\n      console.error('Error details:', {\n        message: error.message,\n        code: error.code,\n        status: (_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : _error$response6.status,\n        statusText: (_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : _error$response7.statusText,\n        data: (_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : _error$response8.data\n      });\n      throw error;\n    }\n  },\n  // Direct company search - faster and more targeted\n  searchByCompanyDirect: async (companyName, yearFilter) => {\n    console.log('Starting DIRECT company search API call for:', companyName, 'year:', yearFilter);\n    const params = new URLSearchParams({\n      company_name: companyName\n    });\n    if (yearFilter) {\n      params.append('year_filter', yearFilter.toString());\n    }\n    try {\n      const response = await api.get(`/search/company-direct?${params}`);\n      console.log('Direct company search response:', response.data);\n      return response.data;\n    } catch (error) {\n      console.error('Direct company search API error:', error);\n      throw error;\n    }\n  },\n  // Direct company search with streaming - combines speed of direct search with real-time progress\n  searchByCompanyDirectStream: async (companyName, yearFilter, onProgress, onComplete, onError) => {\n    console.log('Starting DIRECT STREAMING company search API call for:', companyName, 'year:', yearFilter);\n    const token = getToken();\n    if (!token) {\n      onError({\n        message: 'No authentication token available'\n      });\n      return;\n    }\n    try {\n      const params = new URLSearchParams({\n        company_name: companyName\n      });\n      if (yearFilter) {\n        params.append('year_filter', yearFilter.toString());\n      }\n      const url = `${API_BASE_URL}/search/company-direct-stream?${params}`;\n      console.log('Making SSE request to:', url);\n      const eventSource = new EventSource(url + `&authorization=${encodeURIComponent(`Bearer ${token}`)}`);\n      eventSource.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('Received SSE data:', data);\n          if (data.type === 'final_summary') {\n            onComplete(data);\n            eventSource.close();\n          } else if (data.type === 'error' || data.type === 'auth_error' || data.type === 'auth_required') {\n            onError(data);\n            eventSource.close();\n          } else {\n            onProgress(data);\n          }\n        } catch (parseError) {\n          console.error('Error parsing SSE data:', parseError);\n          onError({\n            message: 'Error parsing server response'\n          });\n          eventSource.close();\n        }\n      };\n      eventSource.onerror = error => {\n        console.error('SSE connection error:', error);\n        onError({\n          message: 'Connection error during direct streaming search'\n        });\n        eventSource.close();\n      };\n\n      // Timeout after 5 minutes (direct search should be faster but CIG assembly can take time)\n      setTimeout(() => {\n        if (eventSource.readyState !== EventSource.CLOSED) {\n          console.warn('Direct SSE timeout - closing connection');\n          eventSource.close();\n          onError({\n            message: 'Direct search timeout'\n          });\n        }\n      }, 300000);\n    } catch (error) {\n      console.error('Direct streaming company search error:', error);\n      onError(error);\n    }\n  },\n  getTablesWithCIG: async () => {\n    const response = await api.get('/search/tables-with-cig');\n    return response.data;\n  },\n  // Streaming company search using Server-Sent Events\n  searchByCompanyStream: async (companyName, yearFilter, onProgress, onComplete, onError) => {\n    console.log('Starting STREAMING company search API call for:', companyName, 'year:', yearFilter);\n    const token = getToken();\n    if (!token) {\n      onError({\n        message: 'No authentication token available'\n      });\n      return;\n    }\n    try {\n      const params = new URLSearchParams({\n        company_name: companyName\n      });\n      if (yearFilter) {\n        params.append('year_filter', yearFilter.toString());\n      }\n      const url = `${API_BASE_URL}/search/company-stream?${params}`;\n      console.log('Making SSE request to:', url);\n      const eventSource = new EventSource(url + `&authorization=${encodeURIComponent(`Bearer ${token}`)}`);\n      eventSource.onmessage = event => {\n        try {\n          const data = JSON.parse(event.data);\n          console.log('Received SSE data:', data);\n          if (data.type === 'final_summary') {\n            onComplete(data);\n            eventSource.close();\n          } else if (data.type === 'error') {\n            onError(data);\n            eventSource.close();\n          } else {\n            onProgress(data);\n          }\n        } catch (parseError) {\n          console.error('Error parsing SSE data:', parseError);\n          onError({\n            message: 'Error parsing server response'\n          });\n          eventSource.close();\n        }\n      };\n      eventSource.onerror = error => {\n        console.error('SSE connection error:', error);\n        onError({\n          message: 'Connection error during streaming search'\n        });\n        eventSource.close();\n      };\n\n      // Timeout after 2 minutes\n      setTimeout(() => {\n        if (eventSource.readyState !== EventSource.CLOSED) {\n          console.warn('SSE timeout - closing connection');\n          eventSource.close();\n          onError({\n            message: 'Search timeout'\n          });\n        }\n      }, 120000);\n    } catch (error) {\n      console.error('Streaming company search error:', error);\n      onError(error);\n    }\n  }\n};\nexport const systemAPI = {\n  getHealth: async () => {\n    const response = await api.get('/health');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","toast","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","timeout","headers","getToken","localStorage","getItem","setToken","token","setItem","removeToken","removeItem","interceptors","request","use","config","_config$url","Authorization","url","includes","console","log","method","hasAuth","error","Promise","reject","response","_response$config$url","status","dataKeys","Object","keys","data","_error$response","_error$response2","_error$message","_error$response3","_error$response4","_error$response5","code","message","window","location","href","errorData","detail","authAPI","login","credentials","post","access_token","logout","getCurrentUser","get","isAuthenticated","tablesAPI","getTables","getTableSchema","tableName","queryTable","filters","getTableData","page","pageSize","search","orderBy","orderDir","params","URLSearchParams","toString","page_size","order_dir","append","searchAPI","searchByCIG","cig","encodeURIComponent","searchByCompany","companyName","company_name","startTime","Date","now","toISOString","endTime","_error$response6","_error$response7","_error$response8","statusText","searchByCompanyDirect","yearFilter","searchByCompanyDirectStream","onProgress","onComplete","onError","eventSource","EventSource","onmessage","event","JSON","parse","type","close","parseError","onerror","setTimeout","readyState","CLOSED","warn","getTablesWithCIG","searchByCompanyStream","systemAPI","getHealth"],"sources":["C:/Users/desiderato/Documents/DBSee/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse, AxiosError } from 'axios';\r\nimport toast from 'react-hot-toast';\r\nimport {\r\n  User,\r\n  Token,\r\n  LoginRequest,\r\n  TableSchema,\r\n  QueryFilters,\r\n  QueryResult,\r\n  HealthCheck,\r\n  CIGSearchResult,\r\n} from '@/types/api';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://127.0.0.1:8000/api/v1';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  timeout: 30000, // Increased timeout to 30 seconds\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\n// Token management\r\nconst getToken = (): string | null => {\r\n  return localStorage.getItem('access_token');\r\n};\r\n\r\nconst setToken = (token: string): void => {\r\n  localStorage.setItem('access_token', token);\r\n};\r\n\r\nconst removeToken = (): void => {\r\n  localStorage.removeItem('access_token');\r\n};\r\n\r\n// Request interceptor to add auth token\r\napi.interceptors.request.use(\r\n  config => {\r\n    const token = getToken();\r\n    if (token) {\r\n      config.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    \r\n    // Add logging for debugging\r\n    if (config.url?.includes('/search/company')) {\r\n      console.log('Request interceptor - Company search request:', {\r\n        url: config.url,\r\n        method: config.method,\r\n        hasAuth: !!config.headers.Authorization,\r\n        timeout: config.timeout\r\n      });\r\n    }\r\n    \r\n    return config;\r\n  },\r\n  error => {\r\n    console.error('Request interceptor error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Response interceptor for error handling\r\napi.interceptors.response.use(\r\n  (response: AxiosResponse) => {\r\n    // Log successful responses for debugging\r\n    if (response.config.url?.includes('/search/')) {\r\n      console.log('Response interceptor - Successful response:', {\r\n        status: response.status,\r\n        url: response.config.url,\r\n        dataKeys: Object.keys(response.data || {})\r\n      });\r\n    }\r\n    return response;\r\n  },\r\n  (error: AxiosError) => {\r\n    console.error('Axios response interceptor caught error:', error);\r\n    console.error('Error code:', error.code);\r\n    console.error('Error message:', error.message);\r\n    console.error('Response status:', error.response?.status);\r\n    console.error('Response data:', error.response?.data);\r\n    \r\n    if (error.code === 'ECONNABORTED' || error.message?.includes('timeout')) {\r\n      console.error('Request timeout detected');\r\n      toast.error('Request timeout. The search is taking too long. Please try again.');\r\n    } else if (error.response?.status === 403) {\r\n      console.error('403 Forbidden - Authentication/Authorization failed');\r\n      toast.error('Access denied. Please check your permissions or login again.');\r\n      // Don't redirect on 403, just show error\r\n    } else if (error.response?.status === 401) {\r\n      removeToken();\r\n      toast.error('Session expired. Please login again.');\r\n      // Redirect to login page\r\n      window.location.href = '/login';\r\n    } else if (error.response && error.response.status >= 500) {\r\n      toast.error('Server error. Please try again later.');\r\n    } else if (error.response?.data) {\r\n      const errorData = error.response.data as any;\r\n      toast.error(errorData.detail || 'An error occurred');\r\n    } else if (error.request) {\r\n      toast.error('Network error. Please check your connection and ensure the backend is running.');\r\n    } else {\r\n      toast.error('An unexpected error occurred.');\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// API functions\r\nexport const authAPI = {\r\n  login: async (credentials: LoginRequest): Promise<Token> => {\r\n    const response = await api.post<Token>('/auth/login', credentials);\r\n    const token = response.data.access_token;\r\n    setToken(token);\r\n    return response.data;\r\n  },\r\n\r\n  logout: async (): Promise<void> => {\r\n    try {\r\n      await api.post('/auth/logout');\r\n    } finally {\r\n      removeToken();\r\n    }\r\n  },\r\n\r\n  getCurrentUser: async (): Promise<User> => {\r\n    const response = await api.get<User>('/auth/me');\r\n    return response.data;\r\n  },\r\n\r\n  isAuthenticated: (): boolean => {\r\n    return !!getToken();\r\n  },\r\n};\r\n\r\nexport const tablesAPI = {\r\n  getTables: async (): Promise<string[]> => {\r\n    const response = await api.get<string[]>('/tables/');\r\n    return response.data;\r\n  },\r\n\r\n  getTableSchema: async (tableName: string): Promise<TableSchema> => {\r\n    const response = await api.get<TableSchema>(`/tables/${tableName}/schema`);\r\n    return response.data;\r\n  },\r\n\r\n  queryTable: async (\r\n    tableName: string,\r\n    filters: QueryFilters\r\n  ): Promise<QueryResult> => {\r\n    const response = await api.post<QueryResult>(\r\n      `/tables/${tableName}/query`,\r\n      filters\r\n    );\r\n    return response.data;\r\n  },\r\n\r\n  getTableData: async (\r\n    tableName: string,\r\n    page: number = 1,\r\n    pageSize: number = 20,\r\n    search?: string,\r\n    orderBy?: string,\r\n    orderDir: 'asc' | 'desc' = 'asc'\r\n  ): Promise<QueryResult> => {\r\n    const params = new URLSearchParams({\r\n      page: page.toString(),\r\n      page_size: pageSize.toString(),\r\n      order_dir: orderDir,\r\n    });\r\n\r\n    if (search) params.append('search', search);\r\n    if (orderBy) params.append('order_by', orderBy);\r\n\r\n    const response = await api.get<QueryResult>(\r\n      `/tables/${tableName}/data?${params}`\r\n    );\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport const searchAPI = {\r\n  searchByCIG: async (cig: string): Promise<CIGSearchResult> => {\r\n    const response = await api.get<CIGSearchResult>(`/search/cig?cig=${encodeURIComponent(cig)}`);\r\n    return response.data;\r\n  },\r\n\r\n  searchByCompany: async (companyName: string): Promise<any> => {\r\n    console.log('Starting company search API call for:', companyName);\r\n    console.log('Auth token present:', !!getToken());\r\n    \r\n    try {\r\n      const params = new URLSearchParams({ company_name: companyName });\r\n      const url = `/search/company?${params}`;\r\n      console.log('Making request to:', url);\r\n      console.log('Full URL:', `${API_BASE_URL}${url}`);\r\n      \r\n      const startTime = Date.now();\r\n      console.log('Request started at:', new Date().toISOString());\r\n      \r\n      console.log('About to send request...');\r\n      const response = await api.get<any>(url, {\r\n        timeout: 30000, // 30 seconds timeout for company search (matching backend)\r\n      });\r\n      \r\n      console.log('Request sent successfully, awaiting response...');\r\n      \r\n      const endTime = Date.now();\r\n      console.log('Request completed in:', endTime - startTime, 'ms');\r\n      console.log('Response status:', response.status);\r\n      console.log('Response data keys:', Object.keys(response.data || {}));\r\n      \r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('Company search API error:', error);\r\n      console.error('Error details:', {\r\n        message: error.message,\r\n        code: error.code,\r\n        status: error.response?.status,\r\n        statusText: error.response?.statusText,\r\n        data: error.response?.data\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Direct company search - faster and more targeted\r\n  searchByCompanyDirect: async (companyName: string, yearFilter?: number): Promise<any> => {\r\n    console.log('Starting DIRECT company search API call for:', companyName, 'year:', yearFilter);\r\n    const params = new URLSearchParams({ company_name: companyName });\r\n    if (yearFilter) {\r\n      params.append('year_filter', yearFilter.toString());\r\n    }\r\n    \r\n    try {\r\n      const response = await api.get<any>(`/search/company-direct?${params}`);\r\n      console.log('Direct company search response:', response.data);\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('Direct company search API error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Direct company search with streaming - combines speed of direct search with real-time progress\r\n  searchByCompanyDirectStream: async (\r\n    companyName: string,\r\n    yearFilter: number | undefined,\r\n    onProgress: (data: any) => void,\r\n    onComplete: (finalData: any) => void,\r\n    onError: (error: any) => void\r\n  ): Promise<void> => {\r\n    console.log('Starting DIRECT STREAMING company search API call for:', companyName, 'year:', yearFilter);\r\n    const token = getToken();\r\n    \r\n    if (!token) {\r\n      onError({ message: 'No authentication token available' });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const params = new URLSearchParams({ company_name: companyName });\r\n      if (yearFilter) {\r\n        params.append('year_filter', yearFilter.toString());\r\n      }\r\n      const url = `${API_BASE_URL}/search/company-direct-stream?${params}`;\r\n      console.log('Making SSE request to:', url);\r\n      \r\n      const eventSource = new EventSource(url + `&authorization=${encodeURIComponent(`Bearer ${token}`)}`);\r\n      \r\n      eventSource.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          console.log('Received SSE data:', data);\r\n          \r\n          if (data.type === 'final_summary') {\r\n            onComplete(data);\r\n            eventSource.close();\r\n          } else if (data.type === 'error' || data.type === 'auth_error' || data.type === 'auth_required') {\r\n            onError(data);\r\n            eventSource.close();\r\n          } else {\r\n            onProgress(data);\r\n          }\r\n        } catch (parseError) {\r\n          console.error('Error parsing SSE data:', parseError);\r\n          onError({ message: 'Error parsing server response' });\r\n          eventSource.close();\r\n        }\r\n      };\r\n      \r\n      eventSource.onerror = (error) => {\r\n        console.error('SSE connection error:', error);\r\n        onError({ message: 'Connection error during direct streaming search' });\r\n        eventSource.close();\r\n      };\r\n      \r\n      // Timeout after 5 minutes (direct search should be faster but CIG assembly can take time)\r\n      setTimeout(() => {\r\n        if (eventSource.readyState !== EventSource.CLOSED) {\r\n          console.warn('Direct SSE timeout - closing connection');\r\n          eventSource.close();\r\n          onError({ message: 'Direct search timeout' });\r\n        }\r\n      }, 300000);\r\n      \r\n    } catch (error: any) {\r\n      console.error('Direct streaming company search error:', error);\r\n      onError(error);\r\n    }\r\n  },\r\n\r\n  getTablesWithCIG: async (): Promise<{tables: string[], count: number}> => {\r\n    const response = await api.get<{tables: string[], count: number}>('/search/tables-with-cig');\r\n    return response.data;\r\n  },\r\n\r\n  // Streaming company search using Server-Sent Events\r\n  searchByCompanyStream: async (\r\n    companyName: string,\r\n    yearFilter: number | undefined,\r\n    onProgress: (data: any) => void,\r\n    onComplete: (finalData: any) => void,\r\n    onError: (error: any) => void\r\n  ): Promise<void> => {\r\n    console.log('Starting STREAMING company search API call for:', companyName, 'year:', yearFilter);\r\n    const token = getToken();\r\n    \r\n    if (!token) {\r\n      onError({ message: 'No authentication token available' });\r\n      return;\r\n    }\r\n    \r\n    try {\r\n      const params = new URLSearchParams({ company_name: companyName });\r\n      if (yearFilter) {\r\n        params.append('year_filter', yearFilter.toString());\r\n      }\r\n      const url = `${API_BASE_URL}/search/company-stream?${params}`;\r\n      console.log('Making SSE request to:', url);\r\n      \r\n      const eventSource = new EventSource(url + `&authorization=${encodeURIComponent(`Bearer ${token}`)}`);\r\n      \r\n      eventSource.onmessage = (event) => {\r\n        try {\r\n          const data = JSON.parse(event.data);\r\n          console.log('Received SSE data:', data);\r\n          \r\n          if (data.type === 'final_summary') {\r\n            onComplete(data);\r\n            eventSource.close();\r\n          } else if (data.type === 'error') {\r\n            onError(data);\r\n            eventSource.close();\r\n          } else {\r\n            onProgress(data);\r\n          }\r\n        } catch (parseError) {\r\n          console.error('Error parsing SSE data:', parseError);\r\n          onError({ message: 'Error parsing server response' });\r\n          eventSource.close();\r\n        }\r\n      };\r\n      \r\n      eventSource.onerror = (error) => {\r\n        console.error('SSE connection error:', error);\r\n        onError({ message: 'Connection error during streaming search' });\r\n        eventSource.close();\r\n      };\r\n      \r\n      // Timeout after 2 minutes\r\n      setTimeout(() => {\r\n        if (eventSource.readyState !== EventSource.CLOSED) {\r\n          console.warn('SSE timeout - closing connection');\r\n          eventSource.close();\r\n          onError({ message: 'Search timeout' });\r\n        }\r\n      }, 120000);\r\n      \r\n    } catch (error: any) {\r\n      console.error('Streaming company search error:', error);\r\n      onError(error);\r\n    }\r\n  },\r\n};\r\n\r\nexport const systemAPI = {\r\n  getHealth: async (): Promise<HealthCheck> => {\r\n    const response = await api.get<HealthCheck>('/health');\r\n    return response.data;\r\n  },\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}